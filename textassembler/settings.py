"""
Django settings for textassembler project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from configparser import ConfigParser
import logging
import datetime


def load_configs(path_to_configs):
    """Load configs from default location."""
    configs = ConfigParser()
    # Load configs preserving case
    configs.optionxform = str
    # Individual configs accessed via configs object.
    configs.readfp(open(path_to_configs))
    return configs


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Not auto-appending slash to url as that results in loss of data in redirect to url with slash.
APPEND_SLASH = False

# Secure settings (including passwords) stored in additional settings file, and loaded below.
SECURE_SETTINGS = os.path.join(BASE_DIR, "textassembler.cfg")

# Load configs from location in SECURE_SETTINGS
configs = load_configs(SECURE_SETTINGS)

# App Name
APP_NAME = configs.get("general","APP_NAME")

# Storage location where search results will be saved
STORAGE_LOCATION = configs.get("general","STORAGE_LOCATION")

# LexisNexis Configs
LN_TOKEN_URL = configs.get("lexisnexis","TOKEN_URL")
LN_CLIENT_ID = configs.get("lexisnexis","CLIENT_ID")
LN_CLIENT_SECRET = configs.get("lexisnexis","CLIENT_SECRET")
LN_SCOPE = configs.get("lexisnexis","SCOPE")
LN_API_URL = configs.get("lexisnexis","API_URL")
LN_DOWNLOAD_PER_CALL = int(configs.get("lexisnexis","DOWNLOAD_PER_CALL"))
LN_MAX_RETRY = int(configs.get("lexisnexis","MAX_RETRY"))
LN_TIMEOUT = int(configs.get("lexisnexis","TIMEOUT_SECONDS"))
PREVIEW_FORMAT = configs.get("lexisnexis","PREVIEW_FORMAT")
NUM_MONTHS_KEEP_SEARCHES = int(configs.get("lexisnexis","NUM_MONTHS_KEEP_SEARCHES"))

# API Limits
SEARCHES_PER_MINUTE = int(configs.get("api.limits","SEARCHES_PER_MINUTE"))
SEARCHES_PER_HOUR = int(configs.get("api.limits","SEARCHES_PER_HOUR"))
SEARCHES_PER_DAY = int(configs.get("api.limits","SEARCHES_PER_DAY"))
DOWNLOADS_PER_MINUTE = int(configs.get("api.limits","DOWNLOADS_PER_MINUTE"))
DOWNLOADS_PER_HOUR = int(configs.get("api.limits","DOWNLOADS_PER_HOUR"))
DOWNLOADS_PER_DAY = int(configs.get("api.limits","DOWNLOADS_PER_DAY"))
WEEKDAY_START_TIME = datetime.datetime.strptime(configs.get("api.limits","WEEKDAY_START_TIME"),'%H:%M').time()
WEEKDAY_END_TIME = datetime.datetime.strptime(configs.get("api.limits","WEEKDAY_END_TIME"),'%H:%M').time()
WEEKEND_START_TIME = datetime.datetime.strptime(configs.get("api.limits","WEEKEND_START_TIME"),'%H:%M').time()
WEEKEND_END_TIME = datetime.datetime.strptime(configs.get("api.limits","WEEKEND_END_TIME"),'%H:%M').time()

# App OAuth Configs
APP_AUTH_URL = configs.get("oauth","AUTH_URL")
APP_TOKEN_URL = configs.get("oauth","TOKEN_URL")
APP_PROFILE_URL = configs.get("oauth","PROFILE_URL")
APP_LOGOUT_URL = configs.get("oauth","LOGOUT_URL")
APP_CLIENT_ID = configs.get("oauth","CLIENT_ID")
APP_CLIENT_SECRET = configs.get("oauth","CLIENT_SECRET")
APP_REDIRECT_URL = configs.get("oauth","REDIRECT_URL")
APP_USER_ID_FIELD = configs.get("oauth","USER_ID_FIELD")


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = configs.get("secretkey", "SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = configs.get("debug", "DEBUG").lower() == 'true'

if DEBUG:
    # will output to console
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(levelname)-8s %(message)s', datefmt='%a, %d %b %Y %H:%M:%S', filemode='w')
else:
    logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)-8s %(message)s', datefmt='%a, %d %b %Y %H:%M:%S', filemode='w')

ALLOWED_HOSTS = [host.strip() for host in configs.get("hosts", "ALLOWED_HOSTS").split(",")]

# General settings
MAINTAINER_EMAILS = [email.strip() for email in configs.get("general", "MAINTAINER_EMAILS").split(",")]
NOTIF_EMAIL_DOMAIN = configs.get("general","NOTIF_EMAIL_DOMAIN")
BCC_MAINTAINERS_ON_NOTIF = configs.get("general", "BCC_MAINTAINERS_ON_NOTIF").lower() == 'true'
PREFERED_HOST_URL = configs.get("hosts","PREFERED_HOST_URL")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'crispy_forms',
    'textassembler_processor.apps.TextassemblerProcessorConfig',
    'textassembler_web.apps.TextassemblerWebConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'textassembler.urls'
CRISPY_TEMPLATE_PACK = 'bootstrap4'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'textassembler.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# Database
DATABASES = {'default': dict(configs.items("database.default")),} 
# Check for ATOMIC_REQUESTS setting. If not set, defaults to True.
ATOMIC_REQUESTS = DATABASES['default'].get('ATOMIC_REQUESTS', "True").lower() == "true"
DATABASES['default']['ATOMIC_REQUESTS'] = ATOMIC_REQUESTS

# Activating STRICT_ALL_TABLES mode forces truncated strings inserted into
# the database to produce errors instead of warnings.
DATABASES['default']['OPTIONS'] = {'sql_mode': 'STRICT_ALL_TABLES'}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = configs.get("general", "TIME_ZONE")

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')
